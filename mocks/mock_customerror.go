// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandre-slp/event-broker/app/api (interfaces: CustomError)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomError is a mock of CustomError interface.
type MockCustomError struct {
	ctrl     *gomock.Controller
	recorder *MockCustomErrorMockRecorder
}

// MockCustomErrorMockRecorder is the mock recorder for MockCustomError.
type MockCustomErrorMockRecorder struct {
	mock *MockCustomError
}

// NewMockCustomError creates a new mock instance.
func NewMockCustomError(ctrl *gomock.Controller) *MockCustomError {
	mock := &MockCustomError{ctrl: ctrl}
	mock.recorder = &MockCustomErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomError) EXPECT() *MockCustomErrorMockRecorder {
	return m.recorder
}

// ReturnedCode mocks base method.
func (m *MockCustomError) ReturnedCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnedCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ReturnedCode indicates an expected call of ReturnedCode.
func (mr *MockCustomErrorMockRecorder) ReturnedCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnedCode", reflect.TypeOf((*MockCustomError)(nil).ReturnedCode))
}

// ReturnedMsg mocks base method.
func (m *MockCustomError) ReturnedMsg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnedMsg")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReturnedMsg indicates an expected call of ReturnedMsg.
func (mr *MockCustomErrorMockRecorder) ReturnedMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnedMsg", reflect.TypeOf((*MockCustomError)(nil).ReturnedMsg))
}
