// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandre-slp/event-broker/app/api (interfaces: Router)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	router "github.com/fasthttp/router"
	gomock "github.com/golang/mock/gomock"
	fasthttp "github.com/valyala/fasthttp"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockRouter) DELETE(arg0 string, arg1 func(*fasthttp.RequestCtx)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DELETE", arg0, arg1)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockRouterMockRecorder) DELETE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockRouter)(nil).DELETE), arg0, arg1)
}

// GET mocks base method.
func (m *MockRouter) GET(arg0 string, arg1 func(*fasthttp.RequestCtx)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GET", arg0, arg1)
}

// GET indicates an expected call of GET.
func (mr *MockRouterMockRecorder) GET(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockRouter)(nil).GET), arg0, arg1)
}

// Group mocks base method.
func (m *MockRouter) Group(arg0 string) *router.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(*router.Group)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockRouterMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockRouter)(nil).Group), arg0)
}

// Handler mocks base method.
func (m *MockRouter) Handler() func(*fasthttp.RequestCtx) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(func(*fasthttp.RequestCtx))
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockRouterMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockRouter)(nil).Handler))
}

// PATCH mocks base method.
func (m *MockRouter) PATCH(arg0 string, arg1 func(*fasthttp.RequestCtx)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PATCH", arg0, arg1)
}

// PATCH indicates an expected call of PATCH.
func (mr *MockRouterMockRecorder) PATCH(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockRouter)(nil).PATCH), arg0, arg1)
}

// POST mocks base method.
func (m *MockRouter) POST(arg0 string, arg1 func(*fasthttp.RequestCtx)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "POST", arg0, arg1)
}

// POST indicates an expected call of POST.
func (mr *MockRouterMockRecorder) POST(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockRouter)(nil).POST), arg0, arg1)
}

// PUT mocks base method.
func (m *MockRouter) PUT(arg0 string, arg1 func(*fasthttp.RequestCtx)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PUT", arg0, arg1)
}

// PUT indicates an expected call of PUT.
func (mr *MockRouterMockRecorder) PUT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockRouter)(nil).PUT), arg0, arg1)
}
