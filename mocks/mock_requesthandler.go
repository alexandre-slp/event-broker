// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandre-slp/event-broker/app/api (interfaces: RequestHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/alexandre-slp/event-broker/app/api"
	gomock "github.com/golang/mock/gomock"
	fasthttp "github.com/valyala/fasthttp"
)

// MockRequestHandler is a mock of RequestHandler interface.
type MockRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestHandlerMockRecorder
}

// MockRequestHandlerMockRecorder is the mock recorder for MockRequestHandler.
type MockRequestHandlerMockRecorder struct {
	mock *MockRequestHandler
}

// NewMockRequestHandler creates a new mock instance.
func NewMockRequestHandler(ctrl *gomock.Controller) *MockRequestHandler {
	mock := &MockRequestHandler{ctrl: ctrl}
	mock.recorder = &MockRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestHandler) EXPECT() *MockRequestHandlerMockRecorder {
	return m.recorder
}

// InitRequestHandler mocks base method.
func (m *MockRequestHandler) InitRequestHandler(arg0 ...api.PathInitializer) fasthttp.RequestHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitRequestHandler", varargs...)
	ret0, _ := ret[0].(fasthttp.RequestHandler)
	return ret0
}

// InitRequestHandler indicates an expected call of InitRequestHandler.
func (mr *MockRequestHandlerMockRecorder) InitRequestHandler(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRequestHandler", reflect.TypeOf((*MockRequestHandler)(nil).InitRequestHandler), arg0...)
}
