// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexandre-slp/event-broker/app/api (interfaces: ResponseBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResponseBuilder is a mock of ResponseBuilder interface.
type MockResponseBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockResponseBuilderMockRecorder
}

// MockResponseBuilderMockRecorder is the mock recorder for MockResponseBuilder.
type MockResponseBuilderMockRecorder struct {
	mock *MockResponseBuilder
}

// NewMockResponseBuilder creates a new mock instance.
func NewMockResponseBuilder(ctrl *gomock.Controller) *MockResponseBuilder {
	mock := &MockResponseBuilder{ctrl: ctrl}
	mock.recorder = &MockResponseBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseBuilder) EXPECT() *MockResponseBuilderMockRecorder {
	return m.recorder
}

// WriteResponse mocks base method.
func (m *MockResponseBuilder) WriteResponse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteResponse")
}

// WriteResponse indicates an expected call of WriteResponse.
func (mr *MockResponseBuilderMockRecorder) WriteResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockResponseBuilder)(nil).WriteResponse))
}
